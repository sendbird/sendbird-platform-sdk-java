/*
 * Sendbird Platform SDK
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.File;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.sendbird.client.JSON;


/**
 * AddApnsPushConfigurationData
 */
@JsonPropertyOrder({
  AddApnsPushConfigurationData.JSON_PROPERTY_APNS_CERT,
  AddApnsPushConfigurationData.JSON_PROPERTY_APNS_CERT_ENV_TYPE,
  AddApnsPushConfigurationData.JSON_PROPERTY_APNS_CERT_PASSWORD,
  AddApnsPushConfigurationData.JSON_PROPERTY_HAS_UNREAD_COUNT_BADGE,
  AddApnsPushConfigurationData.JSON_PROPERTY_CONTENT_AVAILABLE,
  AddApnsPushConfigurationData.JSON_PROPERTY_MUTABLE_CONTENT,
  AddApnsPushConfigurationData.JSON_PROPERTY_PUSH_SOUND,
  AddApnsPushConfigurationData.JSON_PROPERTY_APNS_TYPE
})
@JsonTypeName("addApnsPushConfigurationData")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-24T21:22:01.103596+09:00[Asia/Seoul]")
public class AddApnsPushConfigurationData {
  public static final String JSON_PROPERTY_APNS_CERT = "apns_cert";
  private File apnsCert;

  public static final String JSON_PROPERTY_APNS_CERT_ENV_TYPE = "apns_cert_env_type";
  private String apnsCertEnvType;

  public static final String JSON_PROPERTY_APNS_CERT_PASSWORD = "apns_cert_password";
  private String apnsCertPassword;

  public static final String JSON_PROPERTY_HAS_UNREAD_COUNT_BADGE = "has_unread_count_badge";
  private Boolean hasUnreadCountBadge;

  public static final String JSON_PROPERTY_CONTENT_AVAILABLE = "content_available";
  private Boolean contentAvailable;

  public static final String JSON_PROPERTY_MUTABLE_CONTENT = "mutable_content";
  private Boolean mutableContent;

  public static final String JSON_PROPERTY_PUSH_SOUND = "push_sound";
  private String pushSound;

  public static final String JSON_PROPERTY_APNS_TYPE = "apns_type";
  private String apnsType;

  public AddApnsPushConfigurationData() { 
  }

  public AddApnsPushConfigurationData apnsCert(File apnsCert) {
    this.apnsCert = apnsCert;
    return this;
  }

   /**
   * In a form of the &#x60;multipart/form-data&#x60; content type, specifies a [.p12](/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) file of which type is either development or production. Sendbird server scans the content of the file, finds out the certificate type, and then registers the file as the corresponding type. If you upload a wrong file, you will receive an error.
   * @return apnsCert
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "In a form of the `multipart/form-data` content type, specifies a [.p12](/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) file of which type is either development or production. Sendbird server scans the content of the file, finds out the certificate type, and then registers the file as the corresponding type. If you upload a wrong file, you will receive an error.")
  @JsonProperty(JSON_PROPERTY_APNS_CERT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public File getApnsCert() {
    return apnsCert;
  }


  @JsonProperty(JSON_PROPERTY_APNS_CERT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setApnsCert(File apnsCert) {
    this.apnsCert = apnsCert;
  }


  public AddApnsPushConfigurationData apnsCertEnvType(String apnsCertEnvType) {
    this.apnsCertEnvType = apnsCertEnvType;
    return this;
  }

   /**
   * Specifies the certificate type of the [.p12](/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) file. Acceptable values are development and production. There is no need to specify this property when the apns_cert above is specified.
   * @return apnsCertEnvType
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the certificate type of the [.p12](/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) file. Acceptable values are development and production. There is no need to specify this property when the apns_cert above is specified.")
  @JsonProperty(JSON_PROPERTY_APNS_CERT_ENV_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getApnsCertEnvType() {
    return apnsCertEnvType;
  }


  @JsonProperty(JSON_PROPERTY_APNS_CERT_ENV_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setApnsCertEnvType(String apnsCertEnvType) {
    this.apnsCertEnvType = apnsCertEnvType;
  }


  public AddApnsPushConfigurationData apnsCertPassword(String apnsCertPassword) {
    this.apnsCertPassword = apnsCertPassword;
    return this;
  }

   /**
   * Specifies the password of the cerfificate file which has been set during the [.p12](/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) export.
   * @return apnsCertPassword
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the password of the cerfificate file which has been set during the [.p12](/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) export.")
  @JsonProperty(JSON_PROPERTY_APNS_CERT_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getApnsCertPassword() {
    return apnsCertPassword;
  }


  @JsonProperty(JSON_PROPERTY_APNS_CERT_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setApnsCertPassword(String apnsCertPassword) {
    this.apnsCertPassword = apnsCertPassword;
  }


  public AddApnsPushConfigurationData hasUnreadCountBadge(Boolean hasUnreadCountBadge) {
    this.hasUnreadCountBadge = hasUnreadCountBadge;
    return this;
  }

   /**
   * Determines whether to badge your client app&#39;s icon with the number of a user&#39;s unread messages. (Default: true)
   * @return hasUnreadCountBadge
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Determines whether to badge your client app's icon with the number of a user's unread messages. (Default: true)")
  @JsonProperty(JSON_PROPERTY_HAS_UNREAD_COUNT_BADGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getHasUnreadCountBadge() {
    return hasUnreadCountBadge;
  }


  @JsonProperty(JSON_PROPERTY_HAS_UNREAD_COUNT_BADGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHasUnreadCountBadge(Boolean hasUnreadCountBadge) {
    this.hasUnreadCountBadge = hasUnreadCountBadge;
  }


  public AddApnsPushConfigurationData contentAvailable(Boolean contentAvailable) {
    this.contentAvailable = contentAvailable;
    return this;
  }

   /**
   * Determines for your client app whether to perform a silent background update on a user&#39;s device. For more information, see the Apple Developer Documentation&#39;s [Pushing Updates to Your App Silently](https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/pushing_updates_to_your_app_silently). (Default: false)
   * @return contentAvailable
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Determines for your client app whether to perform a silent background update on a user's device. For more information, see the Apple Developer Documentation's [Pushing Updates to Your App Silently](https://developer.apple.com/documentation/usernotifications/setting_up_a_remote_notification_server/pushing_updates_to_your_app_silently). (Default: false)")
  @JsonProperty(JSON_PROPERTY_CONTENT_AVAILABLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getContentAvailable() {
    return contentAvailable;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT_AVAILABLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setContentAvailable(Boolean contentAvailable) {
    this.contentAvailable = contentAvailable;
  }


  public AddApnsPushConfigurationData mutableContent(Boolean mutableContent) {
    this.mutableContent = mutableContent;
    return this;
  }

   /**
   * Determines for your client app whether or not to modify the payload of a push notification before it is displayed on a user&#39;s device. For more information, see the Apple Developer Documentation&#39;s [Modifying Content in Newly Delivered Notifications](https://developer.apple.com/documentation/usernotifications/modifying_content_in_newly_delivered_notifications). (Default: false)
   * @return mutableContent
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Determines for your client app whether or not to modify the payload of a push notification before it is displayed on a user's device. For more information, see the Apple Developer Documentation's [Modifying Content in Newly Delivered Notifications](https://developer.apple.com/documentation/usernotifications/modifying_content_in_newly_delivered_notifications). (Default: false)")
  @JsonProperty(JSON_PROPERTY_MUTABLE_CONTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getMutableContent() {
    return mutableContent;
  }


  @JsonProperty(JSON_PROPERTY_MUTABLE_CONTENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMutableContent(Boolean mutableContent) {
    this.mutableContent = mutableContent;
  }


  public AddApnsPushConfigurationData pushSound(String pushSound) {
    this.pushSound = pushSound;
    return this;
  }

   /**
   * Specifies the name of a sound file to be played when a push notification is delivered to your client app. The file can be in the app&#39;s main bundle or in the &#x60;Library/Sounds&#x60; folder of the app&#39;s data container.
   * @return pushSound
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies the name of a sound file to be played when a push notification is delivered to your client app. The file can be in the app's main bundle or in the `Library/Sounds` folder of the app's data container.")
  @JsonProperty(JSON_PROPERTY_PUSH_SOUND)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPushSound() {
    return pushSound;
  }


  @JsonProperty(JSON_PROPERTY_PUSH_SOUND)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPushSound(String pushSound) {
    this.pushSound = pushSound;
  }


  public AddApnsPushConfigurationData apnsType(String apnsType) {
    this.apnsType = apnsType;
    return this;
  }

   /**
   * (Deprecated)  Specifies the certificate type of the [.p12](/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) file. Acceptable values are development and production. You should specify either this property or the apns_cert above to inform the server of which certificate type to update.
   * @return apnsType
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "(Deprecated)  Specifies the certificate type of the [.p12](/docs/chat/v3/ios/guides/push-notifications#2-step-3-export-a-p12-file-and-upload-to-sendbird-dashboard) file. Acceptable values are development and production. You should specify either this property or the apns_cert above to inform the server of which certificate type to update.")
  @JsonProperty(JSON_PROPERTY_APNS_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getApnsType() {
    return apnsType;
  }


  @JsonProperty(JSON_PROPERTY_APNS_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setApnsType(String apnsType) {
    this.apnsType = apnsType;
  }


  /**
   * Return true if this addApnsPushConfigurationData object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddApnsPushConfigurationData addApnsPushConfigurationData = (AddApnsPushConfigurationData) o;
    return Objects.equals(this.apnsCert, addApnsPushConfigurationData.apnsCert) &&
        Objects.equals(this.apnsCertEnvType, addApnsPushConfigurationData.apnsCertEnvType) &&
        Objects.equals(this.apnsCertPassword, addApnsPushConfigurationData.apnsCertPassword) &&
        Objects.equals(this.hasUnreadCountBadge, addApnsPushConfigurationData.hasUnreadCountBadge) &&
        Objects.equals(this.contentAvailable, addApnsPushConfigurationData.contentAvailable) &&
        Objects.equals(this.mutableContent, addApnsPushConfigurationData.mutableContent) &&
        Objects.equals(this.pushSound, addApnsPushConfigurationData.pushSound) &&
        Objects.equals(this.apnsType, addApnsPushConfigurationData.apnsType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apnsCert, apnsCertEnvType, apnsCertPassword, hasUnreadCountBadge, contentAvailable, mutableContent, pushSound, apnsType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddApnsPushConfigurationData {\n");
    sb.append("    apnsCert: ").append(toIndentedString(apnsCert)).append("\n");
    sb.append("    apnsCertEnvType: ").append(toIndentedString(apnsCertEnvType)).append("\n");
    sb.append("    apnsCertPassword: ").append(toIndentedString(apnsCertPassword)).append("\n");
    sb.append("    hasUnreadCountBadge: ").append(toIndentedString(hasUnreadCountBadge)).append("\n");
    sb.append("    contentAvailable: ").append(toIndentedString(contentAvailable)).append("\n");
    sb.append("    mutableContent: ").append(toIndentedString(mutableContent)).append("\n");
    sb.append("    pushSound: ").append(toIndentedString(pushSound)).append("\n");
    sb.append("    apnsType: ").append(toIndentedString(apnsType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

