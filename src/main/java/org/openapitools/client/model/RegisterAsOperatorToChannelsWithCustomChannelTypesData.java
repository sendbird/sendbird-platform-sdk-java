/*
 * Sendbird Platform SDK
 * Sendbird Platform API SDK  https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.sendbird.client.JSON;


/**
 * RegisterAsOperatorToChannelsWithCustomChannelTypesData
 */
@JsonPropertyOrder({
  RegisterAsOperatorToChannelsWithCustomChannelTypesData.JSON_PROPERTY_CHANNEL_CUSTOM_TYPES
})
@JsonTypeName("registerAsOperatorToChannelsWithCustomChannelTypesData")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-24T21:22:01.103596+09:00[Asia/Seoul]")
public class RegisterAsOperatorToChannelsWithCustomChannelTypesData {
  public static final String JSON_PROPERTY_CHANNEL_CUSTOM_TYPES = "channel_custom_types";
  private List<String> channelCustomTypes = new ArrayList<>();

  public RegisterAsOperatorToChannelsWithCustomChannelTypesData() { 
  }

  public RegisterAsOperatorToChannelsWithCustomChannelTypesData channelCustomTypes(List<String> channelCustomTypes) {
    this.channelCustomTypes = channelCustomTypes;
    return this;
  }

  public RegisterAsOperatorToChannelsWithCustomChannelTypesData addChannelCustomTypesItem(String channelCustomTypesItem) {
    this.channelCustomTypes.add(channelCustomTypesItem);
    return this;
  }

   /**
   * Specifies an array of one or more custom channel types, in order to register the user as an operator to channels with the channel types.
   * @return channelCustomTypes
  **/
  @jakarta.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Specifies an array of one or more custom channel types, in order to register the user as an operator to channels with the channel types.")
  @JsonProperty(JSON_PROPERTY_CHANNEL_CUSTOM_TYPES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getChannelCustomTypes() {
    return channelCustomTypes;
  }


  @JsonProperty(JSON_PROPERTY_CHANNEL_CUSTOM_TYPES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setChannelCustomTypes(List<String> channelCustomTypes) {
    this.channelCustomTypes = channelCustomTypes;
  }


  /**
   * Return true if this registerAsOperatorToChannelsWithCustomChannelTypesData object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegisterAsOperatorToChannelsWithCustomChannelTypesData registerAsOperatorToChannelsWithCustomChannelTypesData = (RegisterAsOperatorToChannelsWithCustomChannelTypesData) o;
    return Objects.equals(this.channelCustomTypes, registerAsOperatorToChannelsWithCustomChannelTypesData.channelCustomTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channelCustomTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegisterAsOperatorToChannelsWithCustomChannelTypesData {\n");
    sb.append("    channelCustomTypes: ").append(toIndentedString(channelCustomTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

