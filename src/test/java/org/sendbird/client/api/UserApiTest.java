/*
 * Sendbird Platform SDK
 * Sendbird Platform API SDK  [https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api](https://sendbird.com/docs/chat/v3/platform-api/getting-started/prepare-to-use-api)  Contact Support:   Name: Sendbird   Email: [support@sendbird.com](https://mailto:support@sendbird.com)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@sendbird.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.sendbird.client.api;

import org.sendbird.client.*;
import org.sendbird.client.auth.*;
import org.openapitools.client.model.AddARegistrationOrDeviceTokenRequest;
import org.openapitools.client.model.AddARegistrationOrDeviceTokenResponse;
import org.openapitools.client.model.ChooseAPushNotificationContentTemplateRequest;
import org.openapitools.client.model.ChooseAPushNotificationContentTemplateResponse;
import org.openapitools.client.model.CreateAUserRequest;
import org.openapitools.client.model.CreateUserTokenRequest;
import org.openapitools.client.model.CreateUserTokenResponse;
import org.openapitools.client.model.GetChannelInvitationPreferenceResponse;
import org.openapitools.client.model.LeaveMyGroupChannelsRequest;
import org.openapitools.client.model.ListMyGroupChannelsResponse;
import org.openapitools.client.model.ListRegistrationOrDeviceTokensResponse;
import org.openapitools.client.model.ListUsersResponse;
import org.openapitools.client.model.MarkAllMessagesAsReadRequest;
import org.openapitools.client.model.MarkChannelMessagesAsReadRequest;
import org.openapitools.client.model.RemoveARegistrationOrDeviceTokenResponse;
import org.openapitools.client.model.RemoveAllRegistrationOrDeviceTokenResponse;
import org.openapitools.client.model.SendbirdUser;
import org.openapitools.client.model.UpdateAUserRequest;
import org.openapitools.client.model.UpdateChannelInvitationPreferenceRequest;
import org.openapitools.client.model.UpdateChannelInvitationPreferenceResponse;
import org.openapitools.client.model.UpdateCountPreferenceOfAChannelRequest;
import org.openapitools.client.model.UpdateCountPreferenceOfChannelByUrlResponse;
import org.openapitools.client.model.UpdatePushPreferencesForAChannelRequest;
import org.openapitools.client.model.UpdatePushPreferencesForAChannelResponse;
import org.openapitools.client.model.UpdatePushPreferencesRequest;
import org.openapitools.client.model.UpdatePushPreferencesResponse;
import org.openapitools.client.model.ViewCountPreferenceOfAChannelResponse;
import org.openapitools.client.model.ViewNumberOfChannelsWithUnreadMessagesResponse;
import org.openapitools.client.model.ViewNumberOfUnreadMessagesResponse;
import org.openapitools.client.model.ViewPushPreferencesForAChannelResponse;
import org.openapitools.client.model.ViewPushPreferencesResponse;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
public class UserApiTest {

    private final UserApi api = new UserApi();

    /**
     * Add a registration or device token
     *
     * ## Add a registration or device token  &gt; __Note__: A user can have up to 20 FCM registration tokens, 20 HMS device tokens, and 20 APNs device tokens each. The oldest token will be deleted before a new token is added for a user who already has 20 registration or device tokens. Only the 20 newest tokens will be maintained for users who already have more than 20 of each token type.  To send notification requests to push notification services on behalf of your server, adds a specific user&#39;s FCM registration token, HMS device token, or APNs device token to Sendbird server. Depending on which push service you are using, you can pass one of two values in &#x60;token_type&#x60;: &#x60;gcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;.  A FCM registration token and an APNs device token allow identification of each client app instance on each device, and are generated and registered by Android and iOS apps through the corresponding SDKs. Use this method if you need to register a token via your own server.  &gt; __Note__: For more information on the registration token and device token, visit the Google&#39;s [FCM](https://firebase.google.com/docs/auth/admin/verify-id-tokens) page, Huawei&#39;s [Push kit](https://developer.huawei.com/consumer/en/doc/development/HMSCore-Guides/service-introduction-0000001050040060) and Apple&#39;s [APNs](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html) page.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-add-a-registration-or-device-token ----------------------------
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addARegistrationOrDeviceTokenTest() throws ApiException {
        //String userId = null;
        //String tokenType = null;
        //String apiToken = null;
        //AddARegistrationOrDeviceTokenRequest addARegistrationOrDeviceTokenRequest = null;
        //AddARegistrationOrDeviceTokenResponse response = api.addARegistrationOrDeviceToken(userId, tokenType)
        //        .apiToken(apiToken)
        //        .addARegistrationOrDeviceTokenRequest(addARegistrationOrDeviceTokenRequest)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Choose a push notification content template
     *
     * ## Choose a push notification content template  Users can choose a template to determine how push notifications appear to them. Push notification content templates are pre-formatted forms that can be customized to display your own push notification messages on a user&#39;s device. Sendbird provides two types: &#x60;default&#x60; and &#x60;alternative&#x60;. Go to **Settings** &gt; **Chat** &gt; **Push notifications** &gt; **Push notification content templates** on [Sendbird Dashboard](https://dashboard.sendbird.com/auth/signin) to customize the templates.  If the &#x60;push_message_template&#x60; property is specified when [sending a message](https://sendbird.com/docs/chat/platform-api/v3/message/messaging-basics/send-a-message), the content template customized for the message takes precedence over the user&#39;s choice.  &gt; **Note**: Push notifications are only available for group channels.      https://sendbird.com/docs/chat/platform-api/v3/user/configuring-notification-preferences/choose-a-push-notification-content-template#1-choose-a-push-notification-content-template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chooseAPushNotificationContentTemplateTest() throws ApiException {
        //String userId = null;
        //String apiToken = null;
        //ChooseAPushNotificationContentTemplateRequest chooseAPushNotificationContentTemplateRequest = null;
        //ChooseAPushNotificationContentTemplateResponse response = api.chooseAPushNotificationContentTemplate(userId)
        //        .apiToken(apiToken)
        //        .chooseAPushNotificationContentTemplateRequest(chooseAPushNotificationContentTemplateRequest)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Create a user
     *
     * ## Create a user  You should create a user in your Sendbird application to initiate conversations in channels. A user is identified by its unique user ID, and additionally have a changeable nickname, profile image, and so on. Users are at the core of all conversations. Sendbird applications are made up of users who chat in either Open Channels or Group Channels. Using this API, it is possible to have fine grained control over your users and what those users can do. To learn more about users, seeÂ [User overview](https://sendbird.com/docs/chat/platform-api/v3/user/user-overview#2-resource-representation).  https://sendbird.com/docs/chat/platform-api/v3/user/creating-users/create-a-user#1-create-a-user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAUserTest() throws ApiException {
        //String apiToken = null;
        //CreateAUserRequest createAUserRequest = null;
        //SendbirdUser response = api.createAUser()
        //        .apiToken(apiToken)
        //        .createAUserRequest(createAUserRequest)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Create user token
     *
     * ## Create user token  This action issues a session token for user authentication. Session tokens provide an efficient stateless authentication method by not storing the tokens in the Sendbird database, and thus improving the server&#39;s performance. See [access token vs. session token](https://sendbird.com/docs/chat/platform-api/v3/user/creating-users/create-a-user#2-access-token-vs-session-token) to learn more about authenticating users.  &gt; **Note**: The endpoint &#x60;/users/{user_id}&#x60; is deprecated. Use &#x60;/users/{user_id}/token&#x60; for greater efficiency.      https://sendbird.com/docs/chat/platform-api/v3/user/managing-session-tokens/issue-a-session-token#1-issue-a-session-token
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserTokenTest() throws ApiException {
        //String userId = null;
        //String apiToken = null;
        //CreateUserTokenRequest createUserTokenRequest = null;
        //CreateUserTokenResponse response = api.createUserToken(userId)
        //        .apiToken(apiToken)
        //        .createUserTokenRequest(createUserTokenRequest)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Delete a user
     *
     * ## Delete a user  You can delete a user from your Sendbird application using this API.  &gt; **Note**: This API deletes user data and metadata, except for their messages. If you wish to delete user data including their messages, use the [GDPR request](https://sendbird.com/docs/chat/platform-api/v3/privacy/privacy-overview).      [https://sendbird.com/docs/chat/platform-api/v3/user/managing-users/delete-a-user#1-delete-a-user](https://sendbird.com/docs/chat/platform-api/v3/user/managing-users/delete-a-user#1-delete-a-user)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAUserTest() throws ApiException {
        //String userId = null;
        //String apiToken = null;
        //Object response = api.deleteAUser(userId)
        //        .apiToken(apiToken)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Get channel invitation preference
     *
     * ## Get channel invitation preference  This action retrieves a user&#39;sÂ [group channel](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel)Â invitation preference. Users are subject to both user-specific and application-wide invitation preferences. Of the two, the invitation preference set for a specific user takes precedence overÂ [the default channel invitation preference](https://sendbird.com/docs/chat/platform-api/v3/channel/setting-up-channels/get-default-invitation-preference).  [https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/get-channel-invitation-preference#1-get-channel-invitation-preference](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/get-channel-invitation-preference#1-get-channel-invitation-preference)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChannelInvitationPreferenceTest() throws ApiException {
        //String userId = null;
        //String apiToken = null;
        //GetChannelInvitationPreferenceResponse response = api.getChannelInvitationPreference(userId)
        //        .apiToken(apiToken)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Leave my group channels
     *
     * ## Leave my group channels  This action allows a user to leave all group channels or channels with a specific custom type. This API is useful if you want to let a user leave a set of channels at once. To let a user leave only one of their group channels, use theÂ [leave a channel API](https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/leave-a-channel)Â instead.  Since this API can&#39;t be called for a deactivated user, ensure that theÂ [&lt;code&gt;leave_all_when_deactivated&lt;/code&gt;](https://sendbird.com/docs/chat/platform-api/v3/user/managing-users/update-a-user#2-request-body)Â property of the user is set to its default value ofÂ &#x60;true&#x60;Â to let the user leave all joined group channels upon deactivation.  https://sendbird.com/docs/chat/platform-api/v3/user/managing-joined-group-channels/leave-group-channels#1-leave-group-channels  &#x60;user_id&#x60;   Type: string   Description: Specifies the unique ID of the user to leave all joined group channels.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void leaveMyGroupChannelsTest() throws ApiException {
        //String userId = null;
        //String apiToken = null;
        //LeaveMyGroupChannelsRequest leaveMyGroupChannelsRequest = null;
        //Object response = api.leaveMyGroupChannels(userId)
        //        .apiToken(apiToken)
        //        .leaveMyGroupChannelsRequest(leaveMyGroupChannelsRequest)
        //        .execute();
        // TODO: test validations
    }

    /**
     * List my group channels
     *
     * ## List my group channels  This action retrieves a list ofÂ [group channels](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel)Â that a specific user has joined. You can use various query parameters to determine the search scope and select what kind of information you want to receive about the queried channels.  If you&#39;re looking to retrieve a list of group channels in a specific application, visit theÂ [list group channels](https://sendbird.com/docs/chat/platform-api/v3/channel/listing-channels-in-an-application/list-group-channels)Â page under the Channel section.  https://sendbird.com/docs/chat/platform-api/v3/user/managing-joined-group-channels/list-group-channels-by-user#1-list-group-channels-by-user  &#x60;user_id&#x60;   Type: string   Description: Specifies the unique ID of the target user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMyGroupChannelsTest() throws ApiException {
        //String userId = null;
        //String apiToken = null;
        //String token = null;
        //Integer limit = null;
        //String distinctMode = null;
        //String publicMode = null;
        //String superMode = null;
        //Long createdAfter = null;
        //Long createdBefore = null;
        //Boolean showEmpty = null;
        //Boolean showMember = null;
        //Boolean showDeliveryReceipt = null;
        //Boolean showReadReceipt = null;
        //Boolean showMetadata = null;
        //Boolean showFrozen = null;
        //String order = null;
        //String metadataOrderKey = null;
        //String customTypes = null;
        //String customTypeStartswith = null;
        //String channelUrls = null;
        //String name = null;
        //String nameContains = null;
        //String nameStartswith = null;
        //String membersExactlyIn = null;
        //String membersIncludeIn = null;
        //String queryType = null;
        //String membersNickname = null;
        //String membersNicknameContains = null;
        //String metadataKey = null;
        //String metadataValues = null;
        //String metadataValueStartswith = null;
        //String metacounterKey = null;
        //String metacounterValues = null;
        //String metacounterValueGt = null;
        //String metacounterValueGte = null;
        //String metacounterValueLt = null;
        //String metacounterValueLte = null;
        //Boolean includeSortedMetaarrayInLastMessage = null;
        //String customType = null;
        //Boolean readReceipt = null;
        //Boolean member = null;
        //Boolean isDistinct = null;
        //String membersIn = null;
        //String userId2 = null;
        //ListMyGroupChannelsResponse response = api.listMyGroupChannels(userId)
        //        .apiToken(apiToken)
        //        .token(token)
        //        .limit(limit)
        //        .distinctMode(distinctMode)
        //        .publicMode(publicMode)
        //        .superMode(superMode)
        //        .createdAfter(createdAfter)
        //        .createdBefore(createdBefore)
        //        .showEmpty(showEmpty)
        //        .showMember(showMember)
        //        .showDeliveryReceipt(showDeliveryReceipt)
        //        .showReadReceipt(showReadReceipt)
        //        .showMetadata(showMetadata)
        //        .showFrozen(showFrozen)
        //        .order(order)
        //        .metadataOrderKey(metadataOrderKey)
        //        .customTypes(customTypes)
        //        .customTypeStartswith(customTypeStartswith)
        //        .channelUrls(channelUrls)
        //        .name(name)
        //        .nameContains(nameContains)
        //        .nameStartswith(nameStartswith)
        //        .membersExactlyIn(membersExactlyIn)
        //        .membersIncludeIn(membersIncludeIn)
        //        .queryType(queryType)
        //        .membersNickname(membersNickname)
        //        .membersNicknameContains(membersNicknameContains)
        //        .metadataKey(metadataKey)
        //        .metadataValues(metadataValues)
        //        .metadataValueStartswith(metadataValueStartswith)
        //        .metacounterKey(metacounterKey)
        //        .metacounterValues(metacounterValues)
        //        .metacounterValueGt(metacounterValueGt)
        //        .metacounterValueGte(metacounterValueGte)
        //        .metacounterValueLt(metacounterValueLt)
        //        .metacounterValueLte(metacounterValueLte)
        //        .includeSortedMetaarrayInLastMessage(includeSortedMetaarrayInLastMessage)
        //        .customType(customType)
        //        .readReceipt(readReceipt)
        //        .member(member)
        //        .isDistinct(isDistinct)
        //        .membersIn(membersIn)
        //        .userId2(userId2)
        //        .execute();
        // TODO: test validations
    }

    /**
     * List registration or device tokens
     *
     * ## List registration or device tokens  Retrieves a list of a user&#39;s registration or device tokens. You can pass &#x60;gcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60; for FCM registration token, HMS device token, or APNs device token, respectively, in the &#x60;token_type&#x60; parameter for the push notification service you are using.  https://sendbird.com/docs/chat/platform-api/v3/user/managing-device-tokens/list-registration-or-device-tokens#1-list-registration-or-device-tokens
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRegistrationOrDeviceTokensTest() throws ApiException {
        //String userId = null;
        //String tokenType = null;
        //String apiToken = null;
        //ListRegistrationOrDeviceTokensResponse response = api.listRegistrationOrDeviceTokens(userId, tokenType)
        //        .apiToken(apiToken)
        //        .execute();
        // TODO: test validations
    }

    /**
     * List users
     *
     * ## List users  You can retrieve a list of users in your Sendbird application using this API. You can generate a customized list using various parameter combinations.  https://sendbird.com/docs/chat/platform-api/v3/user/listing-users/list-users#1-list-users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUsersTest() throws ApiException {
        //String token = null;
        //Integer limit = null;
        //String activeMode = null;
        //Boolean showBot = null;
        //String userIds = null;
        //String nickname = null;
        //String nicknameStartswith = null;
        //String metadatakey = null;
        //String metadatavaluesIn = null;
        //String apiToken = null;
        //ListUsersResponse response = api.listUsers()
        //        .token(token)
        //        .limit(limit)
        //        .activeMode(activeMode)
        //        .showBot(showBot)
        //        .userIds(userIds)
        //        .nickname(nickname)
        //        .nicknameStartswith(nicknameStartswith)
        //        .metadatakey(metadatakey)
        //        .metadatavaluesIn(metadatavaluesIn)
        //        .apiToken(apiToken)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Mark all messages as read
     *
     * ## Mark all messages as read  This action marks all of a user&#39;s unread messages as read in certain group channels. If channels aren&#39;t specified, the user&#39;s unread messages in all group channels are marked as read.  https://sendbird.com/docs/chat/platform-api/v3/user/marking-messages-as-read/mark-all-of-a-users-messages-as-read#1-mark-all-of-a-user-s-messages-as-read
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void markAllMessagesAsReadTest() throws ApiException {
        //String userId = null;
        //String apiToken = null;
        //MarkAllMessagesAsReadRequest markAllMessagesAsReadRequest = null;
        //Object response = api.markAllMessagesAsRead(userId)
        //        .apiToken(apiToken)
        //        .markAllMessagesAsReadRequest(markAllMessagesAsReadRequest)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Remove a registration or device token - When unregistering a specific token
     *
     * ## Remove a registration or device token  Removes a user&#39;s specific registration or device token or all tokens. You can passÂ &#x60;gcm&#x60;,Â &#x60;huawei&#x60;, orÂ &#x60;apns&#x60;Â for FCM registration token, HMS device token, or APNs device token, respectively, in theÂ &#x60;token_type&#x60;Â parameter for the push notification service you are using.  https://sendbird.com/docs/chat/platform-api/v3/user/managing-device-tokens/remove-a-registration-or-device-token#1-remove-a-registration-or-device-token
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeARegistrationOrDeviceTokenTest() throws ApiException {
        //String userId = null;
        //String tokenType = null;
        //String token = null;
        //String apiToken = null;
        //RemoveARegistrationOrDeviceTokenResponse response = api.removeARegistrationOrDeviceToken(userId, tokenType, token)
        //        .apiToken(apiToken)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Remove a registration or device token from an owner
     *
     * ## Remove a registration or device token from an owner  Removes a registration or device token from a user who is the owner of the token. You can passÂ &#x60;gcm&#x60;,Â &#x60;huawei&#x60;, orÂ &#x60;apns&#x60;Â for FCM registration token, HMS device token, or APNs device token, respectively, in theÂ &#x60;token_type&#x60;Â parameter for the push notification service you are using.  https://sendbird.com/docs/chat/platform-api/v3/user/managing-device-tokens/remove-a-registration-or-device-token-from-an-owner#1-remove-a-registration-or-device-token-from-an-owner
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeARegistrationOrDeviceTokenFromAnOwnerTest() throws ApiException {
        //String tokenType = null;
        //String token = null;
        //String apiToken = null;
        //List<MarkChannelMessagesAsReadRequest> response = api.removeARegistrationOrDeviceTokenFromAnOwner(tokenType, token)
        //        .apiToken(apiToken)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Remove a registration or device token - When unregistering all device tokens
     *
     * ## Remove a registration or device token  Removes a user&#39;s specific registration or device token or all tokens. You can passÂ &#x60;gcm&#x60;,Â &#x60;huawei&#x60;, orÂ &#x60;apns&#x60;Â for FCM registration token, HMS device token, or APNs device token, respectively, in theÂ &#x60;token_type&#x60;Â parameter for the push notification service you are using.  https://sendbird.com/docs/chat/platform-api/v3/user/managing-device-tokens/remove-a-registration-or-device-token#1-remove-a-registration-or-device-token
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeAllRegistrationOrDeviceTokenTest() throws ApiException {
        //String userId = null;
        //String apiToken = null;
        //RemoveAllRegistrationOrDeviceTokenResponse response = api.removeAllRegistrationOrDeviceToken(userId)
        //        .apiToken(apiToken)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Reset push preferences
     *
     * ## Reset push preferences  You can reset a user&#39;s notifications preferences. The values are reset to the default as the following.  - The values for the &#x60;do_not_disturb&#x60; and &#x60;snooze_enabled&#x60; properties are set to &#x60;false&#x60;.      - The values of the parameters associated with the time frame are all set to &#x60;0&#x60;.      - The value for the &#x60;timezone&#x60; property is set to &#x60;UTC&#x60;.      - The value for the &#x60;push_sound&#x60; property is set to &#x60;default&#x60;.       &gt; **Note**: Push notifications are only available for group channels.      [https://sendbird.com/docs/chat/platform-api/v3/user/configuring-notification-preferences/reset-push-notification-preferences#1-reset-push-notification-preferences](https://sendbird.com/docs/chat/platform-api/v3/user/configuring-notification-preferences/reset-push-notification-preferences#1-reset-push-notification-preferences)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetPushPreferencesTest() throws ApiException {
        //String userId = null;
        //String apiToken = null;
        //Object response = api.resetPushPreferences(userId)
        //        .apiToken(apiToken)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Update a user
     *
     * ## Update a user  You can update information about a user using this API. In addition to changing a user&#39;s nickname or profile image, you can issue a new access token for the user. The new access token replaces the previous one as the necessary token for authentication.  You can also deactivate or reactivate a user using this API request. If the &#x60;leave_all_when_deactivated&#x60; is set to &#x60;true&#x60;, a user leaves all joined group channels and becomes deactivated.  &gt; **Note**: Issuing session tokens through the &#x60;/users/{user_id}&#x60; endpoint is now deprecated and it&amp;apos;s replaced with [&amp;lt;code&amp;gt;/users/{user_id}/token&amp;lt;/code&amp;gt;](https://sendbird.com/docs/chat/platform-api/v3/user/managing-session-tokens/issue-a-session-token) endpoint for greater efficiency. For those who are currently using the old endpoint, you can start issuing tokens using the new endpoint.      [https://sendbird.com/docs/chat/platform-api/v3/user/managing-users/update-a-user#1-update-a-user](https://sendbird.com/docs/chat/platform-api/v3/user/managing-users/update-a-user#1-update-a-user)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAUserTest() throws ApiException {
        //String userId = null;
        //String apiToken = null;
        //UpdateAUserRequest updateAUserRequest = null;
        //SendbirdUser response = api.updateAUser(userId)
        //        .apiToken(apiToken)
        //        .updateAUserRequest(updateAUserRequest)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Update channel invitation preference
     *
     * ## Update channel invitation preference  This action updates a user&#39;sÂ [group channel](https://sendbird.com/docs/chat/platform-api/v3/channel/channel-overview#2-channel-types-3-group-channel)Â invitation preference. Updating theÂ [application&#39;s default channel invitation preference](https://sendbird.com/docs/chat/platform-api/v3/channel/setting-up-channels/update-default-invitation-preference)Â won&#39;t override existing users&#39; individual channel invitation preferences. The changed preference only affects the users created after the update.  https://sendbird.com/docs/chat/platform-api/v3/channel/managing-a-channel/update-channel-invitation-preference#1-update-channel-invitation-preference
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateChannelInvitationPreferenceTest() throws ApiException {
        //String userId = null;
        //String apiToken = null;
        //UpdateChannelInvitationPreferenceRequest updateChannelInvitationPreferenceRequest = null;
        //UpdateChannelInvitationPreferenceResponse response = api.updateChannelInvitationPreference(userId)
        //        .apiToken(apiToken)
        //        .updateChannelInvitationPreferenceRequest(updateChannelInvitationPreferenceRequest)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Update count preference of a channel
     *
     * ## Update count preference of a channel  This action updates a user&#39;s count preference of a specific group channel. The count preference allows a user to either update the number of unread messages or the number of unread mentioned messages, or both in a specific group channel.  If you want to retrieve the total number count of a specific group channel, go to theÂ [get count preference of a channel](https://sendbird.com/docs/chat/platform-api/v3/user/managing-unread-count/get-count-preference-of-a-channel)Â page.  https://sendbird.com/docs/chat/platform-api/v3/user/managing-unread-count/update-count-preference-of-a-channel#1-update-count-preference-of-a-channel
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCountPreferenceOfAChannelTest() throws ApiException {
        //String userId = null;
        //String channelUrl = null;
        //String apiToken = null;
        //UpdateCountPreferenceOfAChannelRequest updateCountPreferenceOfAChannelRequest = null;
        //UpdateCountPreferenceOfChannelByUrlResponse response = api.updateCountPreferenceOfAChannel(userId, channelUrl)
        //        .apiToken(apiToken)
        //        .updateCountPreferenceOfAChannelRequest(updateCountPreferenceOfAChannelRequest)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Update push preferences
     *
     * ## Update push preferences  You can update a user&#39;s notifications preferences. A push notification is a message that is immediately delivered to a user&#39;s device when the device is either idle or running the client app in the background.  &gt; **Note**: Push notifications are only available for group channels.      [https://sendbird.com/docs/chat/platform-api/v3/user/configuring-notification-preferences/update-push-notification-preferences#1-update-push-notification-preferences](https://sendbird.com/docs/chat/platform-api/v3/user/configuring-notification-preferences/update-push-notification-preferences#1-update-push-notification-preferences)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePushPreferencesTest() throws ApiException {
        //String userId = null;
        //String apiToken = null;
        //UpdatePushPreferencesRequest updatePushPreferencesRequest = null;
        //UpdatePushPreferencesResponse response = api.updatePushPreferences(userId)
        //        .apiToken(apiToken)
        //        .updatePushPreferencesRequest(updatePushPreferencesRequest)
        //        .execute();
        // TODO: test validations
    }

    /**
     * Update push preferences for a channel
     *
     * ## Update push preferences for a channel  You can update a user&#39;s notifications preferences for a specific channel. A push notification is a message that is immediately delivered to a user&#39;s device when the device is either idle or running the client app in the background.  &gt; **Note**: Push notifications are only available for group channels.      [https://sendbird.com/docs/chat/platform-api/v3/user/configuring-notification-preferences/update-push-notification-preferences-for-a-channel#1-update-push-notification-preferences-for-a-channel](https://sendbird.com/docs/chat/platform-api/v3/user/configuring-notification-preferences/update-push-notification-preferences-for-a-channel#1-update-push-notification-preferences-for-a-channel)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePushPreferencesForAChannelTest() throws ApiException {
        //String userId = null;
        //String channelUrl = null;
        //String apiToken = null;
        //UpdatePushPreferencesForAChannelRequest updatePushPreferencesForAChannelRequest = null;
        //UpdatePushPreferencesForAChannelResponse response = api.updatePushPreferencesForAChannel(userId, channelUrl)
        //        .apiToken(apiToken)
        //        .updatePushPreferencesForAChannelRequest(updatePushPreferencesForAChannelRequest)
        //        .execute();
        // TODO: test validations
    }

    /**
     * View a user
     *
     * ## View a user  You can retrieve information about a user using this API.  https://sendbird.com/docs/chat/platform-api/v3/user/listing-users/get-a-user#1-get-a-user  &#x60;user_id&#x60;   Type: string   Description: Specifies the unique ID of the user to retrieve.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void viewAUserTest() throws ApiException {
        //String userId = null;
        //Boolean includeUnreadCount = null;
        //String customTypes = null;
        //String superMode = null;
        //String apiToken = null;
        //SendbirdUser response = api.viewAUser(userId)
        //        .includeUnreadCount(includeUnreadCount)
        //        .customTypes(customTypes)
        //        .superMode(superMode)
        //        .apiToken(apiToken)
        //        .execute();
        // TODO: test validations
    }

    /**
     * View count preference of a channel
     *
     * ## View count preference of a channel  This action retrieves a user&#39;s count preference of a specific group channel. The count preference allows a user to either retrieve the number of unread messages or unread mentioned messages, or both in a specific group channel.  If you want to update the total number count of a specific group channel, visit theÂ [update count preference of a channel](https://sendbird.com/docs/chat/platform-api/v3/user/managing-unread-count/update-count-preference-of-a-channel).  https://sendbird.com/docs/chat/platform-api/v3/user/managing-unread-count/get-count-preference-of-a-channel#1-get-count-preference-of-a-channel
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void viewCountPreferenceOfAChannelTest() throws ApiException {
        //String userId = null;
        //String channelUrl = null;
        //String apiToken = null;
        //ViewCountPreferenceOfAChannelResponse response = api.viewCountPreferenceOfAChannel(userId, channelUrl)
        //        .apiToken(apiToken)
        //        .execute();
        // TODO: test validations
    }

    /**
     * View number of channels with unread messages
     *
     * ## View number of channels with unread messages  This action retrieves the total number of group channels in which a user has unread messages. You can use various query parameters to determine the search scope of group channels.  https://sendbird.com/docs/chat/platform-api/v3/user/managing-unread-count/get-number-of-channels-with-unread-messages#1-get-number-of-channels-with-unread-messages
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void viewNumberOfChannelsWithUnreadMessagesTest() throws ApiException {
        //String userId = null;
        //String customTypes = null;
        //String superMode = null;
        //String apiToken = null;
        //ViewNumberOfChannelsWithUnreadMessagesResponse response = api.viewNumberOfChannelsWithUnreadMessages(userId)
        //        .customTypes(customTypes)
        //        .superMode(superMode)
        //        .apiToken(apiToken)
        //        .execute();
        // TODO: test validations
    }

    /**
     * View number of unread messages
     *
     * ## View number of unread messages  This action retrieves a user&#39;s total number of unread messages in group channels.  &gt; **Note**: The unread count feature is only available for group channels.      [https://sendbird.com/docs/chat/platform-api/v3/user/managing-unread-count/get-number-of-unread-messages#1-get-number-of-unread-messages](https://sendbird.com/docs/chat/platform-api/v3/user/managing-unread-count/get-number-of-unread-messages#1-get-number-of-unread-messages)  &#x60;user_id&#x60;   Type: string   Description: Specifies the unique ID of a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void viewNumberOfUnreadMessagesTest() throws ApiException {
        //String userId = null;
        //String customTypes = null;
        //String superMode = null;
        //String apiToken = null;
        //ViewNumberOfUnreadMessagesResponse response = api.viewNumberOfUnreadMessages(userId)
        //        .customTypes(customTypes)
        //        .superMode(superMode)
        //        .apiToken(apiToken)
        //        .execute();
        // TODO: test validations
    }

    /**
     * View push preferences
     *
     * ## View push preferences  You can retrieves a user&#39;s notifications preferences. A push notification is a message that is immediately delivered to a user&#39;s device when the device is either idle or running the client app in the background.  &gt; **Note**: Push notifications are only available for group channels.      [https://sendbird.com/docs/chat/platform-api/v3/user/configuring-notification-preferences/get-push-notification-preferences#1-get-push-notification-preferences](https://sendbird.com/docs/chat/platform-api/v3/user/configuring-notification-preferences/get-push-notification-preferences#1-get-push-notification-preferences)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void viewPushPreferencesTest() throws ApiException {
        //String userId = null;
        //String apiToken = null;
        //ViewPushPreferencesResponse response = api.viewPushPreferences(userId)
        //        .apiToken(apiToken)
        //        .execute();
        // TODO: test validations
    }

    /**
     * View push preferences for a channel
     *
     * ## View push preferences for a channel  You can retrieve a user&#39;s notifications preferences for a specific channel. A push notification is a message that is immediately delivered to a user&#39;s device when the device is either idle or running the client app in the background. These notifications preferences can be configured.  &gt; **Note**: Push notifications are only available for group channels.      [https://sendbird.com/docs/chat/platform-api/v3/user/configuring-notification-preferences/get-push-notification-preferences-for-a-channel#1-get-push-notification-preferences-for-a-channel](https://sendbird.com/docs/chat/platform-api/v3/user/configuring-notification-preferences/get-push-notification-preferences-for-a-channel#1-get-push-notification-preferences-for-a-channel)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void viewPushPreferencesForAChannelTest() throws ApiException {
        //String userId = null;
        //String channelUrl = null;
        //String apiToken = null;
        //ViewPushPreferencesForAChannelResponse response = api.viewPushPreferencesForAChannel(userId, channelUrl)
        //        .apiToken(apiToken)
        //        .execute();
        // TODO: test validations
    }

    /**
     * View who owns a registration or device token
     *
     * ## View who owns a registration or device token  Retrieves a user who owns a FCM registration token, HMS device token, or APNs device token. You can pass one of two values in &#x60;token_type&#x60;: &#x60;gcm&#x60;, &#x60;huawei&#x60;, or &#x60;apns&#x60;, depending on which push service you are using.  https://sendbird.com/docs/chat/v3/platform-api/guides/user#2-view-who-owns-a-registration-or-device-token ----------------------------
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void viewWhoOwnsARegistrationOrDeviceTokenTest() throws ApiException {
        //String tokenType = null;
        //String token = null;
        //String apiToken = null;
        //List<MarkChannelMessagesAsReadRequest> response = api.viewWhoOwnsARegistrationOrDeviceToken(tokenType, token)
        //        .apiToken(apiToken)
        //        .execute();
        // TODO: test validations
    }

}
